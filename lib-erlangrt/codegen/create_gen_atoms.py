#!/usr/bin/env python3
# takes: atoms.tab
# Prints a Rust source file predefined atom values (preregistered by
# emulator::atom during the startup)

from typing import List, Dict
import erlangrt.genop as genop


class AddAtom:
    def __init__(self, atom: str, cname: str, atom_id: int):
        self.atom = atom.strip("'")
        self.cname = cname
        self.atom_id = atom_id


def main():
    conf = genop.OTP25()
    tables = genop.OTPTables(conf)

    print("""\
//! Generated by `codegen/create_gen_atoms.py`
//! Creates array of predefined atoms
//! Config used: {otp}
#![allow(dead_code)]

use crate::term::*;

""".format(otp=conf.__class__.__name__))

    # all_atoms = []  # type: Dict[str, genop.Atom]
    # uniq_atoms = set()

    #
    # Print convenient atom constants
    #
    atom_keys = list(tables.atom_dict.keys())
    atom_keys.sort()

    i = 0
    for akey in atom_keys:
        a = tables.atom_dict[akey]
        print("pub const {cname}: Term = Term::make_atom({index});"
              "".format(cname=a.cname, index=i))
        i += 1

    #
    # Print initialization vector
    #
    i = 0
    print("\npub static ATOM_INIT_NAMES: &'static [&'static str] = &[")
    for akey in atom_keys:
        a = tables.atom_dict[akey]
        print('  "{atext}", // id={aid}'.format(atext=a.text, aid=i))
        i += 1

    print("];")


if __name__ == "__main__":
    main()
